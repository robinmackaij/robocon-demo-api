[project]
name="robocon_demo_api"
version = "0.2.0"
description = "An API implementation to demonstrate different resource dependencies."
authors = [
    {name = "Robin Mackaij", email="r.a.mackaij@gmail.com"},
]
maintainers = [
    {name = "Robin Mackaij", email="r.a.mackaij@gmail.com"},
]
readme =  "./docs/README.md"
license = { file = "LICENSE" }
classifiers = [
    "Private :: Do Not Upload",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Framework :: FastAPI",
]
requires-python = ">=3.10, <4"
dependencies = [
    "uvicorn >= 0.20.0",
    "fastapi >= 0.88.0",
    "pydantic >= 1.10.4",
    "PyYAML >= 6.0",
    "robotframework-requests >= 0.9.4",
    "restinstance >= 1.3.0",
    "robotframework-openapitools >= 0.2.0",
    "python-multipart >= 0.0.5",
]

[dependency-groups]
dev = [
    "invoke >= 2.2.0",
]
type-checking = [
    "mypy >= 1.14.1",
    "pyright >= 1.1.350",
]
lint-and-format = [
    "ruff >= 0.8.5",
    "pylint >= 3.3.3",
    "robotframework-robocop >= 5.7.0",
    "robotframework-tidy >= 4.15.0",
]

[project.urls]
homepage = "https://github.com/robinmackaij/robocon-demo-api"

[tool.poetry]
requires-poetry = ">=2.0"
packages = [
    { include = "robocon_demo_api", from = "src" },
]

# https://github.com/python-poetry/poetry/issues/9751
[tool.poetry.group.dev.dependencies]
invoke = ">=2.2.0"
[tool.poetry.group.type-checking.dependencies]
mypy = ">=1.14.1"
pyright = ">=1.1.350"
[tool.poetry.group.lint-and-format.dependencies]
ruff = ">=0.8.5"
pylint = ">=3.3.3"
robotframework-robocop = ">=5.7.0"
robotframework-tidy = ">=4.15.0"

# The poetry build backend
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# The uv build backend
# [build-system]
# requires = ["hatchling"]
# build-backend = "hatchling.build"

[tool.mypy]
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
disallow_untyped_defs = true
strict = true
show_error_codes = true
exclude = []

[tool.ruff]
line-length = 88
src = ["."]
target-version = "py313"

[tool.ruff.lint]
select = ["F", "C90", "PL", "RUF"]
ignore = ["RUF012"]

[tool.ruff.lint.isort]
known-first-party = []
known-third-party = []

[tool.ruff.lint.per-file-ignores]
# Explicit re-exports is fine in __init__.py, still a code smell elsewhere.
"__init__.py" = ["F401", "PLC0414"]

[tool.pylint.'MESSAGES CONTROL']
disable = ["logging-fstring-interpolation", "missing-class-docstring", "missing-function-docstring"]
extension-pkg-whitelist = "pydantic"

[tool.pylint.'FORMAT CHECKER']
max-line-length=120

[tool.pylint.'SIMILARITIES CHECKER']
ignore-imports="yes"
